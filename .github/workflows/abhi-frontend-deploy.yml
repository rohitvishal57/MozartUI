name: Build and Deploy Angular App to Azure VM

on:
  # push:
  #   branches:
  #     - main
  #     - Dev
  #     - release
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'abhi_dev'
        type: choice
        options:
          - abhi_dev
          - abhi_uat
          - abhi_prod

env:
  SONAR_PROJECT_KEY: "frontend-sonar-project"
  DEPLOY_BASE_DIR: "D:/abhi_deployments/frontend_deployments"
  WEB_ROOT: "C:/inetpub/wwwroot"
  PORT: 4800

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 10

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.20.3'

    
    - name: Cache Node modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          ~/.cache
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # - name: Print working directory and list its contents
    #   run: |
    #     echo "Current working directory is:"
    #     pwd  # Print the current working directory
    #     echo "Listing the contents of the current directory:"
    #     ls -la  # List the contents of the current working directory
  
    # - name: List MozartUI-Dev directory contents
    #   run: |
    #     echo "Listing the contents of MozartUI-Dev directory:"
    #     ls -la MozartUI-Dev  # List the contents of the MozartUI-Dev directory (if it exists)

    # - name: Install dependencies
    #   run: |
    #     cd MozartUI-Dev
    #     npm install --legacy-peer-deps

    - name: Install dependencies
      run: |
        npm install --legacy-peer-deps
      
    - name: Build the project
      run: |
        npm run build --prod

    - name: List Build Artifacts
      run: ls -la ./dist/

    # - name: List contents in the current directory
    #   run: |
    #     pwd
    #     ls -la 
    #     ls -la MozartUI-Dev
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: angular-artifacts
        path: ./dist/*

    - name: Debug:List files after downloading artifacts
      run: ls -l ./dist/

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v3.0.0
      with:
        projectBaseDir: .
        args: |
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.sources=./src
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # - name: Check SonarQube Quality Gate
    #   run: |
    #     status=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: \
    #       "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT_KEY }}" \
    #       | jq -r .projectStatus.status)
    #     echo "Quality Gate status: $status"
    #     if [ "$status" != "OK" ]; then
    #       echo "Quality Gate failed: $status"
    #       exit 1
    #     fi

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 10

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    - name: Add VM to known hosts
      run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    # Download version.txt if it exists
    - name: Download version.txt if exists
      uses: actions/download-artifact@v3
      with:
        name: version
        path: ./version.txt

    - name: Read and Increment Version
      id: version
      run: |
        if [ ! -f version.txt ]; then
          echo "v1" > version.txt
          NEXT_VERSION="v1"  # Set to v1 on first run
        else
          VERSION=$(cat version.txt)
          NEXT_VERSION="v$(( ${VERSION#v} + 1 ))"
          echo "$NEXT_VERSION" > version.txt
        fi
        echo "VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
        echo "New version is: $NEXT_VERSION"
      shell: bash

    # Upload version.txt
    - name: Upload version.txt
      uses: actions/upload-artifact@v3
      with:
        name: version
        path: version.txt

    - name: Debug:Show generated version
      run: |
        echo "Generated version: ${{ env.VERSION }}"

    - name: Create deployment directory on VM with version
      run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"if (-Not (Test-Path -Path '$DEPLOY_BASE_DIR/${{ env.VERSION }}')) { New-Item -Path '$DEPLOY_BASE_DIR/${{ env.VERSION }}' -ItemType Directory }\""

    # - name: Create deployment directory on VM
    #   run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"if (-Not (Test-Path -Path '$DEPLOY_BASE_DIR/$GITHUB_SHA')) { New-Item -Path '$DEPLOY_BASE_DIR/$GITHUB_SHA' -ItemType Directory }\""

    - name: Manage Previous Deployments (Keep Last 3)
      run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"\$deploymentDir = '$DEPLOY_BASE_DIR'; \$deployments = Get-ChildItem -Path \$deploymentDir | Sort-Object LastWriteTime -Descending; if (\$deployments.Count -gt 3) { \$deployments | Select-Object -Skip 3 | Remove-Item -Recurse -Force }\""
    
    - name: Create directory for artifacts
      run: mkdir -p ./my-artifacts
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: angular-artifacts
        path: ./my-artifacts
    
    - name: Debug:List files after downloading artifacts
      run: ls -l ./my-artifacts

    - name: Upload artifact to VM with versioning
      run: scp -i ~/.ssh/id_rsa -P 22 -r ./my-artifacts/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEPLOY_BASE_DIR/${{ env.VERSION }}/

    # - name: Upload artifact to VM
    #   run: scp -i ~/.ssh/id_rsa -P 22 -r ./my-artifacts/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$DEPLOY_BASE_DIR/$GITHUB_SHA/
    
    - name: Create or Update Application Pool
      run: |
        ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} powershell -Command "
          \$AppPoolName = 'FrontendAppPool';
          try {
            if (Test-Path 'IIS:\\AppPools\\\$AppPoolName') {
              Write-Output 'Application Pool ''\$AppPoolName'' already exists. Skipping creation.';
            } else {
              Write-Output 'Creating Application Pool: \$AppPoolName';
              New-WebAppPool -Name \$AppPoolName;
              Set-ItemProperty IIS:\\AppPools\\\$AppPoolName -Name managedRuntimeVersion -Value 'v4.0';
              Set-ItemProperty IIS:\\AppPools\\\$AppPoolName -Name processModel.identityType -Value ApplicationPoolIdentity;
            }
          } catch {
            Write-Output 'Error while creating Application Pool: \$AppPoolName';
            Write-Output \$_.Exception.Message;
            exit 1;
          }
        "

    - name: Stop IIS Website if Exists
      run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"if (Get-WebSite -Name 'AngularApp' -ErrorAction SilentlyContinue) { Stop-WebSite -Name 'AngularApp' } else { Write-Output 'Website not found' }\""
    
    - name: Remove Existing Website if Exists
      run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"if (Get-WebSite -Name 'AngularApp' -ErrorAction SilentlyContinue) { Remove-WebSite -Name 'AngularApp' } else { Write-Output 'Website not found' }\""
  
    # - name: Ensure abhi_frontend Directory Exists in IIS Web Root
    #   run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"if (-Not (Test-Path -Path '$WEB_ROOT')) { New-Item -Path '$WEB_ROOT' -ItemType Directory }\""
  
    # - name: Clean up the abhi_frontend Directory
    #   run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"Remove-Item -Path '$WEB_ROOT\\*' -Recurse -Force\""
  
    - name: Copy Latest Build to IIS web root directory
      run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"Copy-Item -Path '$DEPLOY_BASE_DIR/${{ env.VERSION }}/*' -Destination '$WEB_ROOT' -Recurse -Force\""
    
    # - name: Copy Latest Build to IIS web root directory
    #   run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"Copy-Item -Path '$DEPLOY_BASE_DIR/$GITHUB_SHA/*' -Destination '$WEB_ROOT' -Recurse -Force\""
  
    - name: Deploy application on IIS
      run: ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"New-WebSite -Name 'AngularApp' -Port $PORT -PhysicalPath ('${{ env.WEB_ROOT }}\\bancaassurance-frontend' -replace '/', '\\') -ApplicationPool 'FrontendAppPool'\""
    # - name: Convert slashes in WEB_ROOT path
    #   id: convert-path
    #   run: |
    #     echo "WEB_ROOT=$(echo 'C:/inetpub/wwwroot/abhi_frontend' | sed 's/\//\\/g')" >> $GITHUB_ENV

    # - name: Deploy application on IIS
    #   run: |
    #     # Deploy the website with proper path formatting
    #     ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"New-WebSite -Name 'AngularApp' -Port $PORT -PhysicalPath ('${{ env.WEB_ROOT }}' -replace '/', '\') -ApplicationPool 'FrontendAppPool'\""

    # - name: Deploy application on IIS
    #   run: |
    #     # Convert slashes in the path
    #     webRoot=${{ env.WEB_ROOT }}
    #     webRootIIS=$(echo $webRoot | sed 's/\//\\/g')
        
    #     # Deploy the website
    #     ssh -i ~/.ssh/id_rsa -p 22 ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "powershell -Command \"New-WebSite -Name 'AngularApp' -Port $PORT -PhysicalPath '$webRootIIS' -ApplicationPool 'FrontendAppPool'\""